#+title: Installing Guix
#+author: Siddhartha Kumar
#+date: 2025-07-11

 #+language: en-us
 #+filetags: :Guix:VMWare:Apple:M1:

 #+HUGO_BASE_DIR: ../../src

 Have you ever been sold on the idea of immutable and reproducible systems?
 Have you ever used [[https://nixos.org][NixOS]] and, despite its awesomeness, felt that its programming
 language, [[https://hydra.nixos.org/build/302166611/download/1/manual/][Nix]], is awkward and lacks elegance? Enter [[https://www.guix.gnu.org][Guix]], which uses
 [[https://www.gnu.org/software/guile/][Guile Scheme]], a Lisp dialect, instead of Nix. The simplicity and elegance of
 Guile are what made me fall in love with Guix.

 I use M series Mac machines, and sadly, Linux is not 100% supported on
 them. The next best thing is to install Guix on a virtual machine. Things
 would have been simple if Guix provided ~aarch64~ installation images, but
 this is not the caseâ€”only ~x86-64~ images are available. One would need to
 build an ~aarch64~ image in order to run it on a virtual machine. In this
 post, I will detail how to build an ~aarch64~ image tailored to
 run on [[https://www.vmware.com/products/desktop-hypervisor/workstation-and-fusion][VMWare Fusion]] for M series Mac machines.

 The *first step* is to install any GNU/Linux distribution on the VM. In my
 case, I installed [[https://ubuntu.com/download/server/arm][Ubuntu Server]]. It is pretty lightweight and yet serves
 our purpose. On it, we must install the =Guix package manager=. One way is to run
 the following commands as root.
 #+begin_src bash
   cd tmp/
   wget https://guix.gnu.org/install.sh
   chmod +x guix-install.sh
   ./guix-install.sh
 #+end_src

 The *second step* is to update Guix. In particular, we update to the version at
 commit =83c749fb0a562ae193ecb2d880bc9aecf492878a=. This is done via
 #+begin_src bash
   sudo -i guix pull --commit=83c749f
 #+end_src

 The idea now is to leverage the ~init~ sub-command of ~guix system~ to populate a
 separate virtual disk with all the necessary files required for Guix
 installation. Once done, we boot from the said disk and start the Guix
 installation process in earnest.

 To that end, as the *third step*, we add another disk to the virtual
 machine. This can be done via the GUI interface of VMWare Fusion. One then needs
 to format this disk. I typically format it with the ~ext4~ file system using the
 command
 #+begin_src bash
   sudo mkfs.ext4 -L Guix_image /dev/nvme0n2
 #+end_src
 where I have assumed that ~/dev/nvme0n2~ is the name of the new disk, and
 labeled it as ~Guix_image~. Finally, we mount it to ~/mnt~ like so:
 #+begin_src bash
   sudo mount /dev/nvme0n2 /mnt
 #+end_src

 Now to the *fourth step*. We create a Guile Scheme file,
 =installation-image.scm=, containing an ~operating-system~ declaration that
 defines the installation image we would like to populate on the
 previously mentioned disk.
 #+begin_src scheme
   (use-modules (gnu)
                (guix)
                (gnu system install))

   (operating-system
    (inherit installation-os)
    (bootloader (bootloader-configuration
                   (bootloader grub-efi-bootloader)
                   (targets (list "/boot/efi"))
                   (keyboard-layout keyboard-layout)))
    (initrd-modules (cons "nvme" %base-initrd-modules)))
 #+end_src
 The thing to note here is that we add the ~nvme~ kernel module to ~initrd~. Without
 this, the installation image would fail to boot from our new =nvme= disk.

 Finally, in the *last step*, we execute the command below to populate the disk:
 #+begin_src bash
   sudo guix system init /path/to/installation-image.scm /mnt
 #+end_src
 Restarting the virtual machine and booting from ~nvme0n2~ will run the Guix
 installation wizard.
